pipeline {
    agent any

    environment {
        DOCKERHUB_CREDS = credentials('mle-template')
        DB_CREDS        = credentials('pgaas-lab2')
        VAULT_CREDS     = credentials('vault_lab_3')
        PROJECT_NAME    = "BigDataLab3"
        IMAGE_NAME      = "lab3"
        PG_DB    = "postgres"
        LC_ALL   = "en_US.UTF-8"
        LANG     = "en_US.UTF-8"
        LANGUAGE = "en_US.UTF-8"
    }

options {
        timestamps()
        skipDefaultCheckout(true)
	}
    stages {
        stage('Clone github repository') {
            steps {
                cleanWs()
                sh 'git clone -b main https://github.com/Timoniche/$PROJECT_NAME.git'
			}
		}

        stage('Checkout repo dir') {
            steps {
                sh 'cd $PROJECT_NAME && dir'
			}
	    }

        stage('Login') {
            steps {
                sh 'docker login -u $DOCKERHUB_CREDS_USR -p $DOCKERHUB_CREDS_PSW'
            }
        }

        stage('Building docker') {
            steps {
                sh 'cd $PROJECT_NAME && docker compose build'
            }
        }

        stage('Decrypting .env file from vault') {
            steps {
                dir("$PROJECT_NAME") {
                    sh 'echo $VAULT_CREDS_PSW > vault_pwd.txt'
                    sh 'cat vault_pwd.txt' //TODO: remove this lime
                    sh 'ansible-vault decrypt vault_env.yml --vault-password-file vault_pwd.txt'
                    sh 'cat vault_env.yml'  //TODO: remove this line
                    sh 'cp vault_env.yml .env'
                }
            }
        }

        stage('Create and run docker container') {
            steps {
                dir("$PROJECT_NAME") {
                    sh 'cat .env' //TODO: remove this line
                    sh 'docker compose up -d'
                }
            }
        }

        stage('Clearing sensitive files') {
            steps {
                dir("$PROJECT_NAME") {
                    sh 'ansible-vault encrypt vault_env.yml --vault-password-file vault_pwd.txt'
                    sh 'cat vault_env.yml' //TODO: remove this line
                    sh 'rm -f vault_pwd.txt'
                    sh 'rm -f .env'
                }
            }
        }

        stage('Checkout coverage report, images') {
            steps{
                dir("$PROJECT_NAME") {
                    sh 'docker compose images'
                    sh 'docker compose logs -t --tail 50'
                }
            }
        }

        stage('Push') {
            steps {
                sh 'docker push ddulaev/$IMAGE_NAME:latest'
            }
        }
	}

    post {
        always {
            dir("$PROJECT_NAME") {
                sh 'docker compose down'
                sh 'docker logout'
                sh 'rm -f vault_pwd.txt'
                sh 'rm -f .env'
            }
        }
    }
}
